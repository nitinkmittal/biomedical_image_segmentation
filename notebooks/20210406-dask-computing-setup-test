{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a74537a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d93358d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.cuda.is_available()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "16aa9339",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b6de59f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dask_jobqueue import SLURMCluster\n",
    "from dask.distributed import Client\n",
    "import numpy as np\n",
    "from time import sleep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98598ade",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style='background-color: #f2f2f2; display: inline-block; padding: 10px; border: 1px solid #999999;'>\n",
       "  <h3>SLURMCluster</h3>\n",
       "  <ul>\n",
       "    <li><b>Dashboard: </b><a href='http://10.99.101.17:8787/status' target='_blank'>http://10.99.101.17:8787/status</a>\n",
       "  </ul>\n",
       "</div>\n"
      ],
      "text/plain": [
       "SLURMCluster(9b0b9e0a, 'tcp://10.99.101.17:35564', workers=0, threads=0, memory=0 B)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cluster = SLURMCluster(\n",
    "    n_workers=10,\n",
    "    cores=50, \n",
    "    memory=\"100GB\")\n",
    "cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "771439a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "client = Client(cluster)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d39ac34c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(i: int):\n",
    "#     sleep(i)\n",
    "    return np.random.randn(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c220002",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 347 µs, sys: 899 µs, total: 1.25 ms\n",
      "Wall time: 923 µs\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([-0.66161056, -0.10898764, -0.48950341, -0.85676528,  1.18871035,\n",
       "        1.1167218 ,  0.62346965,  0.17815289,  1.15224301,  0.65114046])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "func(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e79295cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.84 s, sys: 153 ms, total: 1.99 s\n",
      "Wall time: 1.94 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([-0.28018221])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "results_future = []\n",
    "for i in range(1, 10000):\n",
    "    results_future.append(func(i=i))\n",
    "results_future[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcad3c25",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "results_future = []\n",
    "for i in range(1, 100000):\n",
    "    results_future.append(client.submit(func, i=1000000))\n",
    "results = [result.result()[0] for result in results_future]\n",
    "results[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "049a66af",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "biomedical_image_segmentation",
   "language": "python",
   "name": "biomedical_image_segmentation"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
